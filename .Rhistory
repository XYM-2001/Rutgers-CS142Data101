top <- data[data$Healthy.life.expectancy > quantile(data$Healthy.life.expectancy,
prob = 1-50/100),]
bot <- data[data$Healthy.life.expectancy < quantile(data$Healthy.life.expectancy,
prob = 1-50/100),]
nrow(bot)
nrow(top)
top$Group <- c('top')
bot$Group <- c('bot')
all <- rbind(top, bot)
all
PermutationTestSecond::Permutation(all, 'Group', 'Score', 10000, 'bot', 'top')
top <- data[data$Social.support > quantile(data$Social.support,
prob = 1-50/100),]
bot <- data[data$Social.support < quantile(data$Social.support,
prob = 1-50/100),]
top$Group <- c('top')
bot$Group <- c('bot')
all <- rbind(top, bot)
all
PermutationTestSecond::Permutation(all, 'Group', 'Score', 10000, 'bot', 'top')
top <- data[data$Healthy.life.expectancy > quantile(data$Healthy.life.expectancy,
prob = 1-50/100),]
bot <- data[data$Healthy.life.expectancy < quantile(data$Healthy.life.expectancy,
prob = 1-50/100),]
nrow(bot)
nrow(top)
top$Group <- c('top')
bot$Group <- c('bot')
all <- rbind(top, bot)
all
PermutationTestSecond::Permutation(all, 'Group', 'Score', 10000, 'bot', 'top')
data$Healthy.life.expectancy
top<-data[data$Healthy.life.expectancy>1.0]
bot<-data[data$Healthy.life.expectancy<1.0]
top<-data[data$Healthy.life.expectancy>1.0,]
bot<-data[data$Healthy.life.expectancy<1.0,]
nrow(bot)
nrow(top)
top$Group <- c('top')
bot$Group <- c('bot')
all <- rbind(top, bot)
all
PermutationTestSecond::Permutation(all, 'Group', 'Score', 10000, 'bot', 'top')
hist(tapply(data$Score,data$Country.or.region,mean))
hist(data$Score)
hist(data$Score, main = 'Distribution of Happiness Scores', xlab = 'Score')
data <- read.csv('2019.csv')
summary(data)
summary(data)
hist(data$Score, main = 'Distribution of Happiness Scores', xlab = 'Score')
barplot(tapply(top$Score, top$Country.or.region, sum),
main = 'happiness scores for countries with top 50% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
top <- data[data$Healthy.life.expectancy > quantile(data$Healthy.life.expectancy,
prob = 1-50/100),]
bot <- data[data$Healthy.life.expectancy < quantile(data$Healthy.life.expectancy,
prob = 1-50/100),]
barplot(tapply(top$Score, top$Country.or.region, sum),
main = 'happiness scores for countries with top 50% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
boxplot(top)
data <- read.csv('2019.csv')
summary(data)
hist(tapply(data$Score,data$Country.or.region,mean), main = '')
hist(data$Score, main = 'Distribution of Happiness Scores', xlab = 'Score')
top <- data[data$Healthy.life.expectancy > quantile(data$Healthy.life.expectancy,
prob = 1-50/100),]
bot <- data[data$Healthy.life.expectancy < quantile(data$Healthy.life.expectancy,
prob = 1-50/100),]
barplot(tapply(top$Score, top$Country.or.region, sum),
main = 'happiness scores for countries with top 50% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
boxplot(Score ~ Healthy.life.expectancy, top)
boxplot(Score ~ Healthy.life.expectancy, top, main = 'boxplot for Happiness Score vs Healthy life expectancy')
boxplot(Score ~ Healthy.life.expectancy, top,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 50% life expectancy')
boxplot(Score ~ Healthy.life.expectancy, top,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 50% life')
boxplot(Score ~ Healthy.life.expectancy, bot,
main = 'boxplot for Happiness Score vs Healthy life expectancy for bot 50% life')
boxplot(Score ~ Healthy.life.expectancy, top,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 50% life')
boxplot(Score ~ Healthy.life.expectancy, bot,
main = 'boxplot for Happiness Score vs Healthy life expectancy for bot 50% life')
top <- data[data$Healthy.life.expectancy > quantile(data$Healthy.life.expectancy,
prob = 1-10/100),]
bot <- data[data$Healthy.life.expectancy < quantile(data$Healthy.life.expectancy,
prob = 1-90/100),]
barplot(tapply(top$Score, top$Country.or.region, sum),
main = 'happiness scores for countries with top 50% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
barplot(tapply(bot$Score, bot$Country.or.region, sum),
main = 'happiness scores for countries with bottom 50% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
boxplot(Score ~ Healthy.life.expectancy, top,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 50% life')
boxplot(Score ~ Healthy.life.expectancy, bot,
main = 'boxplot for Happiness Score vs Healthy life expectancy for bot 50% life')
boxplot(Score ~ Healthy.life.expectancy, top,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 50% life')
barplot(tapply(top$Score, top$Country.or.region, sum),
main = 'happiness scores for countries with top 50% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
barplot(tapply(bot$Score, bot$Country.or.region, sum),
main = 'happiness scores for countries with bottom 50% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
boxplot(Score ~ Healthy.life.expectancy, top,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 50% life')
boxplot(Score ~ Healthy.life.expectancy, bot,
main = 'boxplot for Happiness Score vs Healthy life expectancy for bot 50% life')
boxplot(Score ~ Healthy.life.expectancy, top,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 50% life', ylim=c(1,100))
boxplot(Score ~ Healthy.life.expectancy, top,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 50% life', ylim=c(1,10))
boxplot(Score ~ Healthy.life.expectancy, top,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 50% life', ylim=c(1,5))
barplot(tapply(top$Score, top$Country.or.region, sum),
main = 'happiness scores for countries with top 50% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
barplot(tapply(bot$Score, bot$Country.or.region, sum),
main = 'happiness scores for countries with bottom 50% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
boxplot(Score ~ Healthy.life.expectancy, top,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 50% life')
boxplot(Score ~ Healthy.life.expectancy, bot,
main = 'boxplot for Happiness Score vs Healthy life expectancy for bot 50% life')
top <- data[data$Healthy.life.expectancy > quantile(data$Healthy.life.expectancy,
prob = 1-50/100),]
boxplot(Score ~ Healthy.life.expectancy, top,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 50% life')
top$Group <- c('top')
bot$Group <- c('bot')
top <- data[data$Healthy.life.expectancy > quantile(data$Healthy.life.expectancy,
prob = 1-10/100),]
bot <- data[data$Healthy.life.expectancy < quantile(data$Healthy.life.expectancy,
prob = 1-90/100),]
top$Group <- c('top')
bot$Group <- c('bot')
all <- rbind(top, bot)
all
PermutationTestSecond::Permutation(all, 'Group', 'Score', 10000, 'bot', 'top')
barplot(tapply(top$Score, top$Country.or.region, sum),
main = 'happiness scores for countries with top 10% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
barplot(tapply(bot$Score, bot$Country.or.region, sum),
main = 'happiness scores for countries with bottom 10% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
boxplot(Score ~ Healthy.life.expectancy, top,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 10% life')
boxplot(Score ~ Healthy.life.expectancy, bot,
main = 'boxplot for Happiness Score vs Healthy life expectancy for bot 10% life')
top$Group <- c('top')
bot$Group <- c('bot')
all <- rbind(top, bot)
all
PermutationTestSecond::Permutation(all, 'Group', 'Score', 10000, 'bot', 'top')
devtools::install_github("https://github.com/janish-parikh/hypothesis_testing")
HypothesisTesting::z_test_from_agg(mean_a = 2.1, mean_b = 2.8, sd_a = 3,
sd_b = 1, n_a = 50, n_b = 100)
HypothesisTesting::z_test_from_agg(mean_a = 2.1, mean_b = 2.8, sd_a = 3,
sd_b = 1, n_a = 50, n_b = 100)
airbnb <- read.csv('airbnb.csv')
head(airbnb)
nrow(airbnb[airbnb$neighbourhood_group == 'Manhattan' & airbnb$floor > 15,])
max <- max(airbnb[airbnb$neighbourhood_group == 'Manhattan',]$price)
max
airbnb[airbnb$neighbourhood_group == 'Manhattan' & airbnb$price == max]
airbnb[airbnb$neighbourhood_group == 'Manhattan' & airbnb$price == max,]
nrow(airbnb[airbnb$neighbourhood_group == 'Manhattan' & airbnb$price == max,])
boxplot(airbnb[airbnb$room_type=='Private room' & airbnb$neighbourhood_group=='Manhattan',]$price,)
boxplot(airbnb[airbnb$room_type=='Private room' & airbnb$neighbourhood_group=='Manhattan',]$price)
airbnb[airbnb$room_type=='Private room' & airbnb$neighbourhood_group=='Manhattan',]$price
movies <- read.csv('Movies2022F-4.csv')
HypothesisTesting::z_test_from_agg(mean_a = 56.4, mean_b = 47.2, sd_a = 5.9,
sd_b = 6.4, n_a = 15072, n_b = 14921)
HypothesisTesting::z_test_from_agg(mean_b = 56.4, mean_a = 47.2, sd_b = 5.9,
sd_a = 6.4, n_b = 15072, n_a = 14921)
head(airbnb)
airbnb$temp <- airbnb$price-airbnb$floor
airbnb
head(airbnb)
max(airbnb[airbnb$neighbourhood_group == 'Manhattan',]$price)
max_price <- max(airbnb[airbnb$neighbourhood_group == 'Manhattan',]$price)
max_price
airbnb[airbnb$neighbourhood_group == 'Manhattan' & airbnb$price == max,]
airbnb[airbnb$neighbourhood_group == 'Manhattan' & airbnb$price == max_price,]
airbnb[airbnb$neighbourhood_group == 'Manhattan' & airbnb$price == max_price,][1]
airbnb[airbnb$neighbourhood_group == 'Manhattan' & airbnb$price == max_price,][,1]
airbnb[airbnb$neighbourhood_group == 'Manhattan' & airbnb$price == max_price,][1,]
temp <- airbnb[airbnb$neighbourhood_group == 'Manhattan' & airbnb$price == max_price,][1,]
temp$neighbourhood
temp$room_type
mean(airbnb[airbnb$floor>10,]$price)
mean(airbnb[airbnb$floor>10 & airbnb$neighbourhood_group=='Manhattan',]$price)
mean(airbnb[airbnb$floor<=10 & airbnb$neighbourhood_group=='Manhattan',]$price)
boxplot(airbnb[airbnb$floor==10 & airbnb$neighbourhood_group=='Manhattan']$price,
main = "Prices of 10th floor Apartments in Manhattan",
xlab = "Apartment Prices",
ylab = "10th floor Apartments",
col = "blue")
boxplot(airbnb[airbnb$floor==10 & airbnb$neighbourhood_group=='Manhattan',]$price,
main = "Prices of 10th floor Apartments in Manhattan",
xlab = "Apartment Prices",
ylab = "10th floor Apartments",
col = "blue")
barplot(movies[movies$imdb_score=='R',],
main = "R rated movies",
xlab = "rate",
ylab = "Mean Score",
col = "blue")
moody <- read.csv('moody2022_new.csv')
colnames(moody)
summary(moody)
party <- read.csv('Partyb.csv')
vote <- read.csv('Voting1.csv')
sleep <- read.csv('SleepPrediction2.csv')
movies <- read.csv('Movies2022F-4.csv')
grades <- read.csv('canvas1.csv')
grades <- read.csv('Canvas1.csv')
summary(grades)
market <- read.csv('HomeworkMarket2022.csv')
airbnb <- read.csv('airbnb.csv')
titanic <- read.csv('Titanic-train.csv')
titanic <- read.csv('Titanic-train.csv')
max(vote[vote$Party == 'KnowNothings']$Age)
max(vote[vote$Party == 'KnowNothings',]$Age)
vote[vote$Party=='KnowNothings',]
max(vote[vote$Party=='KnowNothings',]$Age)
min(vote$Age)
vote[vote$Age == 18]
vote[vote$Age == 18,]
vote[vote$Age == 18,]$Party
grades$Score
grades$Grade
max(grades[grades$Grade=='B',]$Score)
airbnb[airbnb$neighbourhood == 'Tribeca',]/nrow(airbnb)
nrow(airbnb[airbnb$neighbourhood == 'Tribeca',])/nrow(airbnb)
sleep<-read.csv("https://raw.githubusercontent.com/dev7796/data101_tutorial/main/files/dataset/SleepPrediction2.csv")
colnames(sleep)
nrow(sleep)
summary(sleep)
unique(sleep$Sleep)
unique(sleep$WimpyTea)
unique(sleep$Moon)
summary(sleep)
head(sleep)
tapply(sleep$ExerciseCal, sleep$Sleep, mean)
Prior<-nrow(sleep[sleep$Sleep =='Deep',])/nrow(sleep)
Prior
PriorOdds<-round(Prior/(1-Prior),2)
PriorOdds
TruePositive<-round(nrow(sleep[sleep$Sleep=='Deep'& sleep$LastSleep=='Shallow',])/nrow(sleep[sleep$Sleep=='Deep',]),2)
TruePositive
FalsePositive<-round(nrow(sleep[sleep$Sleep!='Deep'& sleep$LastSleep=='Shallow',])/nrow(sleep[sleep$Sleep!='Deep',]),2)
FalsePositive
LikelihoodRatio<-round(TruePositive/FalsePositive,2)
LikelihoodRatio
PosteriorOdds <-LikelihoodRatio * PriorOdds
PosteriorOdds
Posterior <-PosteriorOdds/(1+PosteriorOdds)
Posterior
head(vote)
vote<-read.csv("https://raw.githubusercontent.com/dev7796/data101_tutorial/main/files/dataset/Voting1.csv")
colnames(vote)
nrow(vote)
summary(vote)
head(vote)
tapply(vote$Age, vote$Party, mean)
table(vote[vote$LeafBlowers=='None',]$Party)
table(vote[vote$Party=='KnowNothings',]$SpeedLimit)
max(vote[vote$Party=='KnowNothings',]$Age)
table(vote[vote$SpeedLimit =='NoLimits'&vote$CBD=='NoRestrictions'& vote$LeafBlowers=='None', ]$Party)
table(vote[vote$LiquerStores=='HardLiquerOnly', ]$Party)
Prior<-nrow(vote[vote$Party =='Royalists',])/nrow(vote)
Prior
PriorOdds<-round(Prior/(1-Prior),2)
PriorOdds
TruePositive<-round(nrow(vote[vote$Party=='Royalists'& vote$Age>65,])/nrow(vote[vote$Party=='Royalists',]),2)
TruePositive
FalsePositive<-round(nrow(vote[vote$Party!='Royalists'& vote$Age>65,])/nrow(vote[vote$Party!='Royalists',]),2)
FalsePositive
LikelihoodRatio<-round(TruePositive/FalsePositive,2)
LikelihoodRatio
PosteriorOdds <-LikelihoodRatio * PriorOdds
PosteriorOdds
Posterior <-PosteriorOdds/(1+PosteriorOdds)
Posterior
mean(vote[vote$Party=='Anarchists',]$Age)
mean(vote[vote$Party=='KnowNothings',]$Age)
Permutation(vote, "Party", "Age",10000, "Anarchists", "KnowNothings")
Permutation(sleep, "Sleep", "OnComputer",10000, "Deep", "Shallow")
HypothesisTesting::permutation_test(sleep, "Sleep", "OnComputer",10000, "Deep", "Shallow")
HypothesisTesting::permutation_test(vote, "Party", "Age",10000, "Anarchists", "KnowNothings")
table(vote[vote$LeafBlowers=='ElectricOnly',]$Party)
head(5)
summary(party)
party<-read.csv("https://raw.githubusercontent.com/dev7796/data101_tutorial/main/files/dataset/Partyb.csv")
summary(party)
party$Music
mean(party[party$Music=='Classical',]$CaloriesDanc)
vote$LeafBlowers
unique(vote$LeafBlowers)
Prior<-nrow(vote[vote$LeafBlowers=='ElectricOnly',])/nrow(vote)
Prior
PriorOdds<-round(Prior/(1-Prior),2)
PriorOdds
TruePositive<-round(nrow(vote[vote$Party=='Royalists'& vote$LeafBlowers=='ElectricOnly',])/nrow(vote[vote$Party=='Royalists',]),2)
TruePositive
FalsePositive<-round(nrow(vote[vote$Party!='Royalists'& voteLeafBlowers=='ElectricOnly',])/nrow(vote[vote$Party!='Royalists',]),2)
FalsePositive<-round(nrow(vote[vote$Party!='Royalists'& vote$LeafBlowers=='ElectricOnly',])/nrow(vote[vote$Party!='Royalists',]),2)
FalsePositive
LikelihoodRatio<-round(TruePositive/FalsePositive,2)
LikelihoodRatio
PosteriorOdds <-LikelihoodRatio * PriorOdds
PosteriorOdds
Posterior <-PosteriorOdds/(1+PosteriorOdds)
Posterior
unique(vote$Party)
unique(vote$SpeedLimit)
Prior<-nrow(vote[vote$SpeedLimit=='NoLimits',])/nrow(vote)
Prior
TruePositive<-round(nrow(vote[vote$Party=='Anarchists'& vote$SpeedLimit =='NoLimits',])/nrow(vote[vote$Party=='Anarchists',]),2)
TruePositive
FalsePositive<-round(nrow(vote[vote$Party!='Anarchists'& vote$SpeedLimit =='NoLimits',])/nrow(vote[vote$Party!='Anarchists',]),2)
FalsePositive
LikelihoodRatio<-round(TruePositive/FalsePositive,2)
LikelihoodRatio
PosteriorOdds <-LikelihoodRatio * PriorOdds
PosteriorOdds
Posterior <-PosteriorOdds/(1+PosteriorOdds)
Posterior
vote$LeafBlowers=='ElectricOnly'
max(vote$LeafBlowers=='ElectricOnly')
party$Party
party$Party
read.csv('HireWide.csv')
head(hire)
hire <- read.csv('HireWide.csv')
head(hire)
hire <- read.csv('HireWide.csv')
head(hire)
unique(hire$Coding)
unique(hire$Impression)
source("C:/Users/xmeng/Desktop/Data101/temp.R", echo=TRUE)
unique(hire$Major)
unique(hire$Hired)
unique(hire$SPORTSPLAYED)
unique(hire$TIKTOK)
unique(hire$Hired)
Prior<-nrow(hire[hire$Hired == 'yes'])/nrow(hire)
Prior
Prior<-nrow(hire[hire$Hired == 'yes',])/nrow(hire)
Prior
hire[hire$Hired == 'yes',]
hire$Hired
hire[hire$Hired == 'yes',]
hire[hire$Hired == 'Yes',]
Prior<-nrow(hire[hire$Hired == 'Yes',])/nrow(hire)
Prior
PriorOdds<-round(Prior/(1-Prior),2)
PriorOdds
hire[hire$Coding == 'Excellent']
hire[hire$Coding == 'Excellent',]
TruePositive<-round(nrow(hire[hire$Hired == 'Yes' & hire[hire$Coding == 'Excellent'],])/nrow(hire[hire$Hired == 'Yes',]),2)
TruePositive<-round(nrow(hire[hire$Hired == 'Yes' & hire[hire$Coding == 'Excellent',])/nrow(hire[hire$Hired == 'Yes',]),2)
TruePositive<-round(nrow(hire[hire$Hired == 'Yes' & hire$Coding == 'Excellent',])/nrow(hire[hire$Hired == 'Yes',]),2)
TruePositive
TruePositive<-round(nrow(hire[hire$Hired != 'Yes' & hire$Coding == 'Excellent',])/nrow(hire[hire$Hired != 'Yes',]),2)
FalsePositive
LikelihoodRatio<-round(TruePositive/FalsePositive,2)
LikelihoodRatio
PosteriorOdds <-LikelihoodRatio * PriorOdds
PosteriorOdds
Posterior <-PosteriorOdds/(1+PosteriorOdds)
Posterior
Prior<-nrow(hire[hire$Coding == 'Weak',])/nrow(hire)
Prior
PriorOdds<-round(Prior/(1-Prior),2)
PriorOdds
TruePositive<-round(nrow(hire[hire$Coding == 'Weak' & hire$Hired == 'Yes',])/nrow(hire[hire$Coding == 'Weak',]),2)
TruePositive
TruePositive<-round(nrow(hire[hire$Coding != 'Weak' & hire$Hired == 'Yes',])/nrow(hire[hire$Coding != 'Weak',]),2)
FalsePositive
LikelihoodRatio<-round(TruePositive/FalsePositive,2)
LikelihoodRatio
PosteriorOdds <-LikelihoodRatio * PriorOdds
PosteriorOdds
Posterior <-PosteriorOdds/(1+PosteriorOdds)
Posterior
unique(hire$Coding)
PermutationTestSecond::Permutation(hire, 'Coding', 'Age', 10000, 'Excellent', 'Weak')
data <- read.csv('2019.csv')
data$GDP.per.capita
data$Social.support
top_gdb_social <- data[data$GDP.per.capita >
quantile(data$GDP.per.capita,
prob = 1-10/100)
& data$Social.support >
quantile(data$Social.support,
prob = 1-10/100),]
top_gdb_social
top_gdp_social <- data[data$GDP.per.capita >
quantile(data$GDP.per.capita,
prob = 1-10/100)
& data$Social.support >
quantile(data$Social.support,
prob = 1-10/100),]
bot_gdp_social <- data[data$GDP.per.capita <
quantile(data$GDP.per.capita,
prob = 1-10/100)
& data$Social.support <
quantile(data$Social.support,
prob = 1-10/100),]
bot_gdp_social
bot_gdp_social <- data[data$GDP.per.capita <
quantile(data$GDP.per.capita,
prob = 1-90/100)
& data$Social.support <
quantile(data$Social.support,
prob = 1-90/100),]
bot_gdp_social
barplot(tapply(bot$Score, top_gdp_social$Country.or.region, sum),
main = 'happiness scores for countries with top 10% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
barplot(tapply(bot_gdp_social$Score, top_gdp_social$Country.or.region, sum),
main = 'happiness scores for countries with top 10% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
barplot(tapply(top_gdp_social$Score, top_gdp_social$Country.or.region, sum),
main = 'happiness scores for countries with top 10% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
barplot(tapply(bot_gdp_social$Score, bot_gdp_social$Country.or.region, sum),
main = 'happiness scores for countries with bottom 10% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
boxplot(Score ~ sum(GDP.percapita,Social.support), top_gdp_social,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 10% life')
boxplot(Score ~ sum(GDP.per.capita,Social.support), top_gdp_social,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 10% life')
boxplot(Score ~ GDP.per.capita+Social.support, top_gdp_social,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 10% life')
top_gdp_social <- data[data$GDP.per.capita >
quantile(data$GDP.per.capita,
prob = 1-30/100)
& data$Social.support >
quantile(data$Social.support,
prob = 1-30/100),]
bot_gdp_social <- data[data$GDP.per.capita <
quantile(data$GDP.per.capita,
prob = 1-70/100)
& data$Social.support <
quantile(data$Social.support,
prob = 1-70/100),]
barplot(tapply(top_gdp_social$Score, top_gdp_social$Country.or.region, sum),
main = 'happiness scores for countries with top 10% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
barplot(tapply(bot_gdp_social$Score, bot_gdp_social$Country.or.region, sum),
main = 'happiness scores for countries with bottom 10% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
boxplot(Score ~ GDP.per.capita+Social.support, top_gdp_social,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 10% life')
top_gdb_social
top_gdp_social
top_gdp_social <- data[data$GDP.per.capita >
quantile(data$GDP.per.capita,
prob = 1-5/100)
& data$Social.support >
quantile(data$Social.support,
prob = 1-5/100),]
boxplot(Score ~ GDP.per.capita+Social.support, top_gdp_social,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 10% life')
bot_gdp_social <- data[data$GDP.per.capita <
quantile(data$GDP.per.capita,
prob = 1-90/100)
& data$Social.support <
quantile(data$Social.support,
prob = 1-90/100),]
top_gdp_social <- data[data$GDP.per.capita >
quantile(data$GDP.per.capita,
prob = 1-10/100)
& data$Social.support >
quantile(data$Social.support,
prob = 1-10/100),]
barplot(tapply(top_gdp_social$Score, top_gdp_social$Country.or.region, sum),
main = 'happiness scores for countries with top 10% healthy life expectancy',
xlab = 'Country or Region', ylab = 'Happiness Score')
boxplot(Score ~ GDP.per.capita+Social.support, top_gdp_social,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 10% life')
boxplot(Score ~ Social.support, top_gdp_social,
main = 'boxplot for Happiness Score vs Healthy life expectancy for top 10% life')
boxplot(Score ~ GDP.per.capita+Social.support, bot_gdp_social,
main = 'boxplot for Happiness Score vs gdp+social support for bot 10% gdp and social support')
top_gdp_social$Group <- c('top')
bot_gdp_social$Group <- c('bot')
all <- rbind(top, bot)
all
all <- rbind(top_gdp_social, bot_gdp_social)
all
PermutationTestSecond::Permutation(all, 'Group', 'Score', 10000, 'bot', 'top')
barplot(tapply(top_gdp_social$Score, top_gdp_social$Country.or.region, sum),
main = 'happiness scores for countries with top 10% gdp and social support',
xlab = 'Country or Region', ylab = 'Happiness Score')
barplot(tapply(bot_gdp_social$Score, bot_gdp_social$Country.or.region, sum),
main = 'happiness scores for countries with bottom 10% gdp and social support',
xlab = 'Country or Region', ylab = 'Happiness Score')
boxplot(Score ~ GDP.per.capita+Social.support, top_gdp_social,
main = 'boxplot for Happiness Score vs gdp+social support for top 10% gdp and social support')
boxplot(Score ~ GDP.per.capita+Social.support, bot_gdp_social,
main = 'boxplot for Happiness Score vs gdp+social support for bot 10% gdp and social support')
top_gdp_social$Group <- c('top')
bot_gdp_social$Group <- c('bot')
all <- rbind(top_gdp_social, bot_gdp_social)
all
PermutationTestSecond::Permutation(all, 'Group', 'Score', 10000, 'bot', 'top')
